Here we have created a couple of files. One is assignment4.c and it is the driver program. There are another two files called exec1.c and exec2.c. exec1.c and exec2.c files are printing parent process id and child process id for better understanding of forking. When we are going to execute if we give ./exec1 or ./exec2 in command line then they will be executed normally. If we want to remove that "./" part from custom executables then we have to uncomment the commented part of the assignment4.c. But then another aspect of this assignment4.c is that it can also execute ls, pwd, date commands. But then one has to have "./"  appended before there custom executables. Normally we have just used fork() and executing the executables sequentially. But system calls are only eligible in the folder "/bin/". For the text file, we have to first give it execute permission if it is not given by default(check by ls -la/ ls -l); by chmod 777 filename or whatever but make sure it gives the execute permission. Then if file contains normal text then execute will not return any error and program will be executed normally such as text file was never included in the command line for execution. But if you give any command in the text file such as 'ls' then when the text file will be executing it will execute ls as normal ls executes in the terminal.
